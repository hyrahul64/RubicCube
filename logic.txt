array of colors:{1,2,3,4,5,6} 
	1	yellow
	2	red
	3	green
	4	blue
	5	pink
	6	black

array vertices of faces:
{
	//front face
	{0,0,0},{1,0,0},{2,0,0},
	{0,1,0},{1,1,0},{2,1,0},
	{0,2,0},{1,2,0},{2,2,0},

	//back face
	{0,0,2},{1,0,2},{2,0,2},
	{0,1,2},{1,1,2},{2,1,2},
	{0,2,2},{1,2,2},{2,2,2},

	//right face
	//left face
	//top face
	//bottom face

}

array of cubes:
total 27 cubes (8 corner cube + 12 edge cube + 6 center cube + 1 inner cube)
each cube be either corner cube, edge cube or center cube
corner cube has 3 side painted, edge cube has 2 sid paited, center cube has 1 side painted

when we rotate one face of rubic cube, total 8 cube changes position

we have 16 vertices in each face


----------------------------------------------------------
state1 ->ratate-> state2
check for winning condition
if not iterate above steps.

after n number of rotation(from set of 18 types of roations) cubic goes into final state.
where each face has same color on it.

rotation type along x,y,z in clock-anticlock wise

2*3*3 rotation possible = 18 operation max

we have to define data structure for state such that applying operation
on it is easy and put it in another state.
-----------------------------------------------------------
class Cubic
class Face
Class Line

Cubic contains 6 Face object
Face contains 3 Line object

Face class may have type variable to uniquely identifies itself.
Line class may have type variable to uniquely identifies itself.

rotate(axis,dist,dir)
axis - 3 values (x,y,z)
dist - 3 values (1,2,3)
dir - 2 values (clock, anti-clock)

according to above argument Cube class decide which faces and 
which lines should be operated/changed by rotate operation


-----------------------------------------------------------------------------------

While rotation operation one out of nine plate rotate clock or anti-clock
direction. (2*9 = 18 possible operation)

While we rotate one plate, actually we have series of copy operation for colors
of line to line.
Four lines of four faces are taking place of others sequencially.

Plate Pi(i>=1 & i <= 9) rotate
f1.i > f2.i >f3.i>f4.i>f1.i
> operator may be consider shift
= operator may also be thought of 

Line& operator = (Line& l)
{	
	Line temp;
	temp = this
	this.1 = l.1
	this.2 = l.2
	this.3 = l.3
	return temp
}

See temp is necessary otherwise object being copied to loses its value.

#define		RED				0
#define		YELLOW			1
#define		BLUE			2
#define		GREEN			3
#define		PINK			4
#define		BLACK			5

#define		CUBE_SIZE		3

#define		CLOCK_DIR		1
#define		ANTICLOCK_DIR	2


Class RubicCube

public:
	void DrawCube();
	void RotateCube();
	void AnimatePlateRotation();
	
	
	void RotatePlate(int axis,int dist,int dir);
	void TraceCube();
	void RandomizeCube();
	bool IsComplete();
	bool InitializeCube();

private:	
	int m_arrCubeElement[6][3][3];
	
-----------------------------------------------------------------------------------
 roataiton operation can be performed by
 1.	taking help of RubicLine class and overloding >> and = operation
 2.	Without help of any class simply by taking another tempoarary array 6*3*3
 	and assigning cube's element individually. It is easy but we may need to 
 	perform 12+12 = 24 assignment operation.looks clumsy.
 	
 Class RubicLine
 
 private:
 	int *i1;
 	int *i2;
 	int *i3;
 	
 public:
 	RubicLine(int* pa, int* pb, int* pc)
 	{
 		i1=pa;i2=pb;i3=pc;
 	}
	RubicLine(int a, int b, int c)
	{
		i1 = new Integer(a);
		i2 = new Integer(b);
		i3 = new Integer(c);
	}
	RubicLine(RubicLine& rl)
	{
		warning(why do we need this??);
	}
	RubicLine & operator = (RubicLine& rl)
	{
		warning(why do we need this??);
	}
	RubicLine()
	{
		i1 = new Integer(-1);
		i2 = new Integer(-1);
		i3 = new Integer(-1);
	}
	RubicLine operator >> (RubicLine& rl)
	{
		//reference in arg is correct???
		//return temp is correct??
		// What I do to accomplish is 
		//l1>>l2>>l3>>l4>>l1 (cyclic rotation)
	
		RubicLine temp(rl.i1,rl.i2,rl.i3);
		rl.i1=i1;rl.i2=i2;rl.i3-i3;
		return temp;
	}
